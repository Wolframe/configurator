INCLUDE dragAndDrop.tdl
INCLUDE treeOperations.tdl

TRANSACTION addFeature -- (?parentID, name, description, pictures/picture/id)
PREPROC
	INTO normalizedName DO name( name );			-- call 'name' normalizer
	INTO . DO preprocTreeNodeGetParentIdIfRoot( . );	-- get parentID attribute as _parentID
ENDPROC
BEGIN
	INTO . DO treeAddNode<Feature>( $(_parentID), $(name), $(normalizedName));
	DO UPDATE Feature SET description = $(description) WHERE ID = $ID;
	FOREACH pictures/picture/id DO INSERT INTO FeaturePicture( featureID, pictureID, orderNumber ) VALUES( $ID, $(.), $# );
END


TRANSACTION deleteFeature -- (id)
BEGIN
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	DO treeDeleteNode<Feature>( $(id));
END


TRANSACTION updateFeature -- (id, name, description, pictures/picture/id)
PREPROC
	INTO normalizedName DO name( name );	-- call 'name' normalizer
ENDPROC
BEGIN
	DO UPDATE Feature SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	FOREACH pictures/picture/id DO INSERT INTO FeaturePicture( featureID, pictureID, orderNumber ) VALUES( $(/id), $(.), $# );
END


TRANSACTION selectTopFeature
-- Get the parents of a feature
BEGIN
	DO treeSelectTopNodes<Feature>( $(id));
END


TRANSACTION selectFeatureTree
-- Get the feature sub tree with node ID passed as 'id'
RESULT FILTER resfilterTreeView
BEGIN
	DO treeSelectSubNodes<Feature>( $(id));
END


TRANSACTION selectFeature
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT Feature.ID AS id, Feature.parentID AS "parentID",
			Feature.name, Feature.description,
			coalesce( group_concat( Category.name ), '(none)' ) as "used_categories"
		FROM Feature
		LEFT JOIN CategRequires
		ON CategRequires.featureID = Feature.ID
		LEFT JOIN Category
		ON Category.ID = CategRequires.categoryID
		WHERE Feature.ID = $(id)
		GROUP BY Feature.ID, Feature.parentID, Feature.name, Feature.description;
END


TRANSACTION selectFeaturePictures
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM FeaturePicture, Picture
		WHERE FeaturePicture.pictureID = Picture.ID
		AND FeaturePicture.featureID = $(id)
		ORDER BY FeaturePicture.orderNumber;
END


TRANSACTION selectFeatureByName
PREPROC
	INTO normalizedName DO name( name );	-- call 'name' normalizer
ENDPROC
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			description
			FROM Feature WHERE normalizedName = $(normalizedName);
	INTO picture DO SELECT pictureID AS id
		FROM FeaturePicture
		WHERE FeaturePicture.featureID = $1;
END


TRANSACTION selectFeatureSet
BEGIN
	FOREACH /feature INTO feature DO NONEMPTY UNIQUE
		SELECT ID AS id, name, description
			FROM Feature WHERE ID = $(id) ORDER BY ID;
END


TRANSACTION changeFeaturePictureOrder
-- Implementation of drag&drop (move) in feature picture list
BEGIN
	DO listLocalMoveElement<FeaturePicture,pictureID,featureID>( $(srcid), $(dstid), $(featureid));
END



