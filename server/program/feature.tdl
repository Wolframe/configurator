--
-- addFeature
--
TRANSACTION addFeature -- (?parentID, name, description, pictures/picture/id)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );			-- call 'name' normalizer
	INTO . DO preprocTreeNodeGetParentIdIfRoot( . );	-- get parentID attribute as _parentID
END
BEGIN
	DO NONEMPTY UNIQUE SELECT rgt FROM Feature WHERE ID = $(_parentID);
	DO UPDATE Feature SET rgt = rgt + 2 WHERE rgt >= $1;
	DO UPDATE Feature SET lft = lft + 2 WHERE lft > $1;
	DO INSERT INTO Feature (parentID, name, normalizedName, description, lft, rgt) VALUES ($(_parentID), $(name), $(normalizedName), $(description), $1, $1+1);
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Feature WHERE normalizedName = $(normalizedName) AND parentID = $(_parentID);
	KEEP AS newitem;
	DO SELECT MAX(orderNumber) AS newOrderNumber FROM FeaturePicture WHERE featureID = $newitem.ID;
	FOREACH pictures/picture DO INSERT INTO FeaturePicture( featureID, pictureID, orderNumber ) VALUES( $newitem.ID, $(id), $newOrderNumber );
	DO DELETE FROM FeaturePicture WHERE pictureID IS NULL;
END

--
-- deleteFeature
--
TRANSACTION deleteFeature -- (id)
BEGIN
	DO NONEMPTY UNIQUE SELECT lft,rgt,rgt-lft+1 AS width FROM Feature WHERE ID = $(id) AND ID != '1';
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	DO DELETE FROM Feature WHERE lft >= $1 AND lft <= $2;
	DO UPDATE Feature SET lft = lft-$3 WHERE lft>$2;
	DO UPDATE Feature SET rgt = rgt-$3 WHERE rgt>$2;
END

--
-- updateFeature
--
TRANSACTION updateFeature -- (id, name, description, pictures/picture/id)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO UPDATE Feature SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	FOREACH pictures/picture DO INSERT INTO FeaturePicture( featureID, pictureID ) VALUES( $(/id), $(id) );
	DO DELETE FROM FeaturePicture WHERE pictureID IS NULL;
END

--
-- selectFeature                 :Get the feature
-- selectFeatureByName           :Get the feature by name
-- selectFeatureList             :Get a list of categories
--
TRANSACTION selectFeature -- (id)
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT Feature.ID AS id, Feature.parentID AS "parentID",
			Feature.name, Feature.description,
			coalesce( group_concat( Category.name ), '(none)' ) as "used_categories"
		FROM Feature
		LEFT JOIN CategRequires
		ON CategRequires.featureID = Feature.ID
		LEFT JOIN Category
		ON Category.ID = CategRequires.categoryID
		WHERE Feature.ID = $(id)
		GROUP BY Feature.ID, Feature.parentID, Feature.name, Feature.description;
END

TRANSACTION selectFeaturePictures -- (id)
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM FeaturePicture, Picture
		WHERE FeaturePicture.pictureID = Picture.ID
		AND FeaturePicture.featureID = $(id)
		ORDER BY FeaturePicture.orderNumber;
END

TRANSACTION selectFeatureByName -- (name)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			description
			FROM Feature WHERE normalizedName = $(normalizedName);
	INTO picture DO SELECT pictureID AS id
		FROM FeaturePicture
		WHERE FeaturePicture.featureID = $1;
END

TRANSACTION selectFeatureSet -- (/feature/id)
BEGIN
	FOREACH /feature INTO feature DO NONEMPTY UNIQUE
		SELECT ID AS id, name, description
			FROM Feature WHERE ID = $(id) ORDER BY ID;
END

--
-- selectTopFeature       :Get the parents of a feature
--
TRANSACTION selectTopFeature -- (id)
BEGIN
	INTO node DO SELECT P2.ID AS "ID",P2.parentID AS "parentID",P2.name,P2.description FROM Feature AS P1, Feature AS P2 WHERE P1.lft > P2.lft AND P1.lft < P2.rgt AND P1.ID = $(id) ORDER BY P2.ID;
END

--
-- selectFeatureTree       :Get the feature tree
--
TRANSACTION selectFeatureTree -- (id)
RESULT FILTER resfilterTreeView
BEGIN
	INTO name print "feature";
	INTO node DO SELECT P1.ID AS "ID",P1.parentID AS "parentID",P1.name,P1.description FROM Feature AS P1, Feature AS P2 WHERE P1.lft BETWEEN P2.lft AND P2.rgt AND P2.ID = $(id) ORDER BY P1.ID;
END


TRANSACTION changeFeaturePictureOrder
-- Implements drag/drop of a single picture of a feature to another place in the list
-- Inserts a picture moved with id 'srcid' before or after the picture with id 'dstid'
--   when the move is upwards then the picture is inserted before the drop target
--   when the move is downwards then the picture is inserted after the drop target
BEGIN
	DO SELECT orderNumber FROM FeaturePicture WHERE pictureID = $(srcid) AND featureID = $(featureid);
	KEEP AS src;
	DO SELECT orderNumber FROM FeaturePicture WHERE pictureID = $(dstid) AND featureID = $(featureid);
	KEEP AS dst;

	-- [A] Prepare move:
	-- 1.Case)  |-------[dst]---------------[src]-------|
	--                       |<---------------*
	DO UPDATE FeaturePicture SET orderNumber = orderNumber + 1
		WHERE $dst.orderNumber < $src.orderNumber + 0
		AND   FeatureID = $(featureid)
		AND   orderNumber >= $dst.orderNumber
		AND   orderNumber < $src.orderNumber;
	-- 2.Case)  |-------[src]---------------[dst]-------|
	--                    *------------------>|
	DO UPDATE FeaturePicture SET orderNumber = orderNumber - 1
		WHERE $dst.orderNumber > $src.orderNumber + 0
		AND   featureID = $(featureid)
		AND   orderNumber <= $dst.orderNumber
		AND   orderNumber > $src.orderNumber;

	-- [B] Make move:
	DO UPDATE FeaturePicture SET orderNumber = $dst.orderNumber
		WHERE pictureID = $(srcid)
		AND   featureID = $(featureid)
		AND   NOT $dst.orderNumber = $src.orderNumber;
END


