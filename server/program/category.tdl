--
-- addCategory
--
TRANSACTION addCategory -- (?parentID, name, description, pictures/picture/id)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );			-- call 'name' normalizer
	INTO . DO preprocTreeNodeGetParentIdIfRoot( . );	-- get parentID attribute as _parentID
END
BEGIN
	DO NONEMPTY UNIQUE SELECT rgt FROM Category WHERE ID = $(_parentID);
	DO UPDATE Category SET rgt = rgt + 2 WHERE rgt >= $1;
	DO UPDATE Category SET lft = lft + 2 WHERE lft > $1;
	DO INSERT INTO Category (parentID, name, normalizedName, description, lft, rgt) VALUES ($(_parentID), $(name), $(normalizedName), $(description), $1, $1+1);
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Category WHERE normalizedName = $(normalizedName) AND parentID = $(_parentID);
	KEEP AS newitem;
	DO SELECT MAX(orderNumber) AS newOrderNumber FROM CategoryPicture WHERE categoryID = $newitem.ID;
	FOREACH pictures/picture DO INSERT INTO CategoryPicture( categoryID, pictureID, orderNumber ) VALUES( $newitem.ID, $(id), $newOrderNumber );
	DO DELETE FROM CategoryPicture WHERE pictureID IS NULL;
	FOREACH features_required/CategoryFeature DO
		INSERT INTO CategRequires( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/CategoryFeature DO
		INSERT INTO CategProvides( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END

--
-- deleteCategory
--
TRANSACTION deleteCategory -- (id)
BEGIN
	DO NONEMPTY UNIQUE SELECT lft,rgt,rgt-lft+1 AS width FROM Category WHERE ID = $(id) AND ID != '1';
	DO DELETE FROM CategoryPicture WHERE categoryID = $(id);
	DO DELETE FROM CategRequires WHERE categoryID = $(id);
	DO DELETE FROM CategProvides WHERE categoryID = $(id);
	DO DELETE FROM Category WHERE lft >= $1 AND lft <= $2;
	DO UPDATE Category SET lft = lft-$3 WHERE lft>$2;
	DO UPDATE Category SET rgt = rgt-$3 WHERE rgt>$2;
END

--
-- updateCategory
--
TRANSACTION updateCategory -- (id, name, description, pictures/picture/id)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO UPDATE Category SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
	DO DELETE FROM CategoryPicture WHERE categoryID = $(id);
	FOREACH pictures/picture DO INSERT INTO CategoryPicture( categoryID, pictureID ) VALUES( $(/id), $(id) );
	DO DELETE FROM CategoryPicture WHERE pictureID IS NULL;
	DO DELETE FROM CategRequires WHERE categoryID = $(id);
	DO DELETE FROM CategProvides WHERE categoryID = $(id);
	FOREACH features_required/CategoryFeature DO
		INSERT INTO CategRequires( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/CategoryFeature DO
		INSERT INTO CategProvides( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END

--
-- selectCategory                 :Get the category
-- selectCategoryByNormalizedName :Get the category by name
-- selectCategoryList             :Get a list of categories
--
TRANSACTION selectCategory -- (id)
BEGIN
	INTO . DO NONEMPTY UNIQUE SELECT ID AS id,parentID AS "parentID", name,
		description
		FROM Category WHERE ID = $(id);
	INTO features_required/CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM CategRequires, Feature
		WHERE categoryID = $(id)
		AND featureID = Feature.ID;
	INTO features_provided/CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM CategProvides, Feature
		WHERE categoryID = $(id)
		AND featureID = Feature.ID;
END

TRANSACTION selectCatogeryPictures -- (id)
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM CategoryPicture, Picture
		WHERE CategoryPicture.pictureID = Picture.ID
		AND CategoryPicture.categoryID = $(id)
		ORDER BY CategoryPicture.orderNumber;
END

TRANSACTION selectCategoryByName -- (name)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			description FROM Category
			WHERE normalizedName = $(normalizedName);
	INTO picture DO
		SELECT pictureID AS "id"
			FROM CategoryPicture
			WHERE CategoryPicture.categoryID = $1;
END

TRANSACTION selectCategorySet -- (/category/id)
BEGIN
	FOREACH /category INTO category DO NONEMPTY UNIQUE
		SELECT ID AS "ID", name, description
			FROM Category WHERE ID = $(id) ORDER BY ID;
END

--
-- selectTopCategory       :Get the parents of a category
--
TRANSACTION selectTopCategory -- (id)
BEGIN
	INTO node DO SELECT P2.ID AS "ID",P2.parentID AS "parentID",P2.name,P2.description FROM category AS P1, category AS P2 WHERE P1.lft > P2.lft AND P1.lft < P2.rgt AND P1.ID = $(id) ORDER BY P2.ID;
END

--
-- selectCategoryTree       :Get the category tree
--
TRANSACTION selectCategoryTree -- (id)
RESULT FILTER resfilterTreeView
BEGIN
	INTO name print "category";
	INTO node DO SELECT P1.ID AS "ID",P1.parentID AS "parentID",P1.name,P1.description FROM category AS P1, category AS P2 WHERE P1.lft BETWEEN P2.lft AND P2.rgt AND P2.ID = $(id) ORDER BY P1.ID;
END

--
-- selectCategoryFeaturesRequired : temporay relation storage for annotated category/feature relations
--
TRANSACTION selectCategoryFeatureList
BEGIN
	DO createFeatureIDlist();
	FOREACH /feature DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),convert_to_integer($(minQuantity)),convert_to_integer($(maxQuantity)));
	DO DELETE FROM IDlist WHERE featureID IS NULL;
	FOREACH /add DO DELETE FROM IDlist WHERE featureID=$(id);
	FOREACH /add DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),$(minQuantity),$(maxQuantity));
	FOREACH /remove DO DELETE FROM IDlist WHERE featureID=$(id);
	INTO CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM IDlist, Feature
		WHERE Feature.ID = IDlist.featureID;
	DO dropIdList();
END

TRANSACTION selectCategoryFeature
BEGIN
	INTO . DO
		SELECT
			$(id) AS id,
			$(minQuantity) AS "minQuantity",
			$(maxQuantity) AS "maxQuantity";
END


TRANSACTION changeCategoryPictureOrder
-- Implements drag/drop of a single picture of a category to another place in the list
-- Inserts a picture moved with id 'srcid' before or after the picture with id 'dstid'
--   when the move is upwards then the picture is inserted before the drop target
--   when the move is downwards then the picture is inserted after the drop target
BEGIN
	DO SELECT orderNumber FROM CategoryPicture WHERE pictureID = $(srcid) AND categoryID = $(categoryid);
	KEEP AS src;
	DO SELECT orderNumber FROM CategoryPicture WHERE pictureID = $(dstid) AND categoryID = $(categoryid);
	KEEP AS dst;

	-- [A] Prepare move:
	-- 1.Case)  |-------[dst]---------------[src]-------|
	--                       |<---------------*
	DO UPDATE CategoryPicture SET orderNumber = orderNumber + 1
		WHERE $dst.orderNumber < $src.orderNumber + 0
		AND   categoryID = $(categoryid)
		AND   orderNumber >= $dst.orderNumber
		AND   orderNumber < $src.orderNumber;
	-- 2.Case)  |-------[src]---------------[dst]-------|
	--                    *------------------>|
	DO UPDATE CategoryPicture SET orderNumber = orderNumber - 1
		WHERE $dst.orderNumber > $src.orderNumber + 0
		AND   categoryID = $(categoryid)
		AND   orderNumber <= $dst.orderNumber
		AND   orderNumber > $src.orderNumber;

	-- [B] Make move:
	DO UPDATE CategoryPicture SET orderNumber = $dst.orderNumber
		WHERE pictureID = $(srcid)
		AND   categoryID = $(categoryid)
		AND   NOT $dst.orderNumber = $src.orderNumber;
END

