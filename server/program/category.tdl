INCLUDE dragAndDrop.tdl
INCLUDE treeOperations.tdl


TRANSACTION addCategory
PREPROC
	INTO normalizedName DO name( name );			-- call 'name' normalizer
ENDPROC
BEGIN
	INTO . DO treeAddNode<Category>( $(parentID), $(name), $(normalizedName));
	KEEP AS newitem;
	DO UPDATE Category SET description = $(description) WHERE ID = $newitem.ID;

	FOREACH pictures/picture/id DO INSERT INTO CategoryPicture( categoryID, pictureID, orderNumber ) VALUES( $newitem.ID, $(.), $# );

	FOREACH features_required/CategoryFeature DO
		INSERT INTO CategRequires( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/CategoryFeature DO
		INSERT INTO CategProvides( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END


TRANSACTION deleteCategory
BEGIN
	DO DELETE FROM CategoryPicture WHERE categoryID = $(id);
	DO DELETE FROM CategRequires WHERE categoryID = $(id);
	DO DELETE FROM CategProvides WHERE categoryID = $(id);
	DO treeDeleteNode<Category>( $(id));
END


TRANSACTION updateCategory
PREPROC
	INTO normalizedName DO name( name );	-- call 'name' normalizer
ENDPROC
BEGIN
	DO UPDATE Category SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
	DO DELETE FROM CategoryPicture WHERE categoryID = $(id);

	DO DELETE FROM CategoryPicture WHERE categoryID = $(id);
	FOREACH pictures/picture/id DO INSERT INTO CategoryPicture( categoryID, pictureID, orderNumber ) VALUES( $(/id), $(.), $# );

	DO DELETE FROM CategRequires WHERE categoryID = $(id);
	DO DELETE FROM CategProvides WHERE categoryID = $(id);
	FOREACH features_required/CategoryFeature DO
		INSERT INTO CategRequires( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/CategoryFeature DO
		INSERT INTO CategProvides( categoryID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END


TRANSACTION selectCategory
BEGIN
	INTO . DO NONEMPTY UNIQUE SELECT ID AS id,parentID AS "parentID", name,
		description
		FROM Category WHERE ID = $(id);
	INTO features_required/CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM CategRequires, Feature
		WHERE categoryID = $(id)
		AND featureID = Feature.ID;
	INTO features_provided/CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM CategProvides, Feature
		WHERE categoryID = $(id)
		AND featureID = Feature.ID;
END


TRANSACTION selectCategoryThumbnailList
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM CategoryPicture, Picture
		WHERE CategoryPicture.pictureID = Picture.ID
		AND CategoryPicture.categoryID = $(id)
		ORDER BY CategoryPicture.orderNumber;
END


TRANSACTION selectCategoryByName
PREPROC
	INTO normalizedName DO name( name );	-- call 'name' normalizer
ENDPROC
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			description FROM Category
			WHERE normalizedName = $(normalizedName);
	INTO picture DO
		SELECT pictureID AS "id"
			FROM CategoryPicture
			WHERE CategoryPicture.categoryID = $1;
END

TRANSACTION selectCategorySet
BEGIN
	FOREACH /category INTO category DO NONEMPTY UNIQUE
		SELECT ID AS "ID", name, description
			FROM Category WHERE ID = $(id) ORDER BY ID;
END


TRANSACTION selectCategoryTree
-- Get the category sub tree with node ID passed as 'id'
RESULT FILTER resfilterTreeView
BEGIN
	DO treeSelectSubNodes<Category>( $(id));
END


TRANSACTION selectCategoryFeatureList
-- temporay relation storage for annotated category/feature relations
BEGIN
	DO createFeatureIDlist();
	FOREACH /feature DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),convert_to_integer($(minQuantity)),convert_to_integer($(maxQuantity)));
	DO DELETE FROM IDlist WHERE featureID IS NULL;
	FOREACH /add DO DELETE FROM IDlist WHERE featureID=$(id);
	FOREACH /add DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),$(minQuantity),$(maxQuantity));
	FOREACH /remove DO DELETE FROM IDlist WHERE featureID=$(id);
	INTO CategoryFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM IDlist, Feature
		WHERE Feature.ID = IDlist.featureID;
	DO dropIdList();
END

TRANSACTION selectCategoryFeature
BEGIN
	INTO . DO
		SELECT
			$(id) AS id,
			$(minQuantity) AS "minQuantity",
			$(maxQuantity) AS "maxQuantity";
END


TRANSACTION changeCategoryPictureOrder
-- Implementation of drag&drop (move) in category picture list
BEGIN
	DO listLocalMoveElement<CategoryPicture,pictureID,categoryID>( $(srcid), $(dstid), $(categoryid));
END

