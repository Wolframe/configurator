--
-- addTag
--
TRANSACTION addTag -- (parentID, name, description)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO NONEMPTY UNIQUE SELECT rgt FROM Tag WHERE ID = $(parentID);
	DO UPDATE Tag SET rgt = rgt + 2 WHERE rgt >= $1;
	DO UPDATE Tag SET lft = lft + 2 WHERE lft > $1;
	DO INSERT INTO Tag (parentID, name, normalizedName, description, lft, rgt) VALUES ($(parentID), $(name), $(normalizedName), $(description), $1, $1+1);
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Tag WHERE normalizedName = $(normalizedName);
END

--
-- deleteTag
--
TRANSACTION deleteTag -- (id)
BEGIN
	DO NONEMPTY UNIQUE SELECT lft,rgt,rgt-lft+1 AS width FROM Tag WHERE ID = $(id) AND ID != '1';
	DO DELETE FROM Tag WHERE lft >= $1 AND lft <= $2;
	DO UPDATE Tag SET lft = lft-$3 WHERE lft>$2;
	DO UPDATE Tag SET rgt = rgt-$3 WHERE rgt>$2;
END

--
-- updateTag
--
TRANSACTION updateTag -- (id, name, description)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO UPDATE Tag SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
END

--
-- selectTag                 :Get the tag
-- selectTagByName           :Get the tag by name
-- selectTagList             :Get a list of categories
--
TRANSACTION selectTag -- (id)
BEGIN
	INTO . DO NONEMPTY UNIQUE SELECT ID AS id,parentID AS "parentID",name,description FROM Tag WHERE ID = $(id);
END

TRANSACTION selectTagByName -- (name)
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	INTO . DO NONEMPTY UNIQUE SELECT ID AS id,parentID AS "parentID",name,description FROM Tag WHERE normalizedName = $(normalizedName);
END

TRANSACTION selectTagSet -- (/tag/id)
BEGIN
	DO createIdList();
	DO createIdUnion();
	FOREACH /tag DO INSERT INTO IDlist (ID) VALUES ($(id));
	FOREACH /add DO INSERT INTO IDlist (ID) VALUES ($(id));
	DO INSERT INTO IDunion SELECT DISTINCT ID FROM IDlist;

	INTO tag DO SELECT IDunion.ID AS id, TagPath.name AS name
		FROM TagPath, IDunion
		WHERE TagPath.ID = IDunion.ID
		ORDER BY TagPath.ID;

	DO dropIdList();
	DO dropIdUnion();
END

--
-- selectTopTag       :Get the parents of a tag
--
TRANSACTION selectTopTag -- (id)
BEGIN
	INTO node DO SELECT P2.ID AS "ID",P2.parentID AS "parentID",P2.name,P2.description FROM Tag AS P1, Tag AS P2 WHERE P1.lft > P2.lft AND P1.lft < P2.rgt AND P1.ID = $(id) ORDER BY P2.ID;
END

--
-- selectTagTree       :Get the tag tree
--
TRANSACTION selectTagTree -- (id)
RESULT FILTER resfilterTreeView
BEGIN
	INTO name print "tag"
	INTO node DO SELECT P1.ID AS "ID",P1.parentID AS "parentID",P1.name,P1.description FROM Tag AS P1, Tag AS P2 WHERE P1.lft BETWEEN P2.lft AND P2.rgt AND P2.ID = $(id) ORDER BY P1.ID;
END

