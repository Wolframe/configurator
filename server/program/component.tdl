TRANSACTION selectComponentList
BEGIN
	INTO component DO
		SELECT Component.ID AS "id", code, Component.name AS "name",
			coalesce( Category.name, '' ) AS "categoryName",
			coalesce( Manufacturer.name, '' ) AS "manufacturerName",
			mfgCode AS "mfgCode", Component.webPage AS "webPage", Component.description, price
		FROM Component
		LEFT JOIN Category
		ON Component.categoryID = Category.ID
		LEFT JOIN Manufacturer
		ON Component.manufacturerID = Manufacturer.ID
		ORDER BY Component.ID;
END

TRANSACTION addComponent
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );		-- call 'name' normalizer
	INTO . DO preprocComponentDefaultValues( . );	-- get default values for non defined things
END
BEGIN
	DO INSERT INTO Component( code, name, normalizedName, categoryID, manufacturerID, mfgCode, webPage, description, price, pricecurrency)
		VALUES ( $(code), $(name), $(normalizedName), convert_to_integer($(category/id)), convert_to_integer($(manufacturer/id)), $(mfgCode), $(webPage), $(description), convert_to_numeric($(_price)), $(_priceCurrency));
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Component WHERE normalizedName = $(normalizedName);
	FOREACH picture DO INSERT INTO ComponentPicture( componentID, pictureID ) VALUES( $1, $(id) );
	DO DELETE FROM ComponentPicture WHERE pictureID IS NULL;
	FOREACH features_required/ComponentFeature DO
		INSERT INTO ComponentRequires( componentID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/ComponentFeature DO
		INSERT INTO ComponentProvides( componentID, featureID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END

TRANSACTION updateComponent
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );		-- call 'name' normalizer
	INTO . DO preprocComponentDefaultValues( . );	-- get default values for non defined things
END
BEGIN
	DO DELETE FROM ComponentPicture WHERE componentID = $(id);
	DO UPDATE Component SET code=$(code), name=$(name), normalizedName=$(normalizedName),
		categoryID=convert_to_integer($(category/id)), manufacturerID=convert_to_integer($(manufacturer/id)),
		mfgCode=$(mfgCode), webPage=$(webPage), description=$(description),
		price=convert_to_numeric($(_price))
		WHERE ID=$(id);
	FOREACH picture DO INSERT INTO ComponentPicture( componentID, pictureID ) VALUES( $(/id), $(id) );
	DO DELETE FROM ComponentPicture WHERE pictureID IS NULL;
	DO DELETE FROM ComponentRequires WHERE componentID = $(id);
	DO DELETE FROM ComponentProvides WHERE componentID = $(id);
	FOREACH features_required/ComponentFeature DO
		INSERT INTO ComponentRequires( componentID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH features_provided/ComponentFeature DO
		INSERT INTO ComponentProvides( componentID, featureID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
END

TRANSACTION deleteComponent
BEGIN
	DO DELETE FROM ComponentRequires WHERE componentID = $(id);
	DO DELETE FROM ComponentProvides WHERE componentID = $(id);
	DO DELETE FROM ComponentPicture WHERE componentID = $(id);
	DO DELETE FROM Component WHERE ID = $(id);
END

TRANSACTION selectComponent
BEGIN
	INTO . DO
		SELECT Component.ID AS "id", code, name,
			mfgCode AS "mfgCode", webPage AS "webPage", description, price
			FROM Component
			WHERE Component.ID = $(id);
	INTO category DO
		SELECT categoryID AS "id", Category.name AS "_"
			FROM Component, Category
			WHERE Component.ID = $(id)
			AND Component.CategoryID = Category.ID;
	INTO manufacturer DO
		SELECT manufacturerID AS "id", Manufacturer.name AS "_"
			FROM Component
			LEFT JOIN Manufacturer
			ON manufacturerID = Manufacturer.ID
			WHERE Component.ID = $(id);
	INTO features_required/ComponentFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM ComponentRequires, Feature
		WHERE componentID = $(id)
		AND featureID = Feature.ID;
	INTO features_provided/ComponentFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM ComponentProvides, Feature
		WHERE componentID = $(id)
		AND featureID = Feature.ID;
END

TRANSACTION selectComponentPictures -- (id)
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM ComponentPicture, Picture
		WHERE ComponentPicture.pictureID = Picture.ID
		AND ComponentPicture.componentID = $(id);
END

--
-- selectComponentFeaturesRequired : temporay relation storage for annotated category/feature relations
--
TRANSACTION selectComponentFeatureList
BEGIN
	DO createFeatureIDlist();
	FOREACH /feature DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),convert_to_integer($(minQuantity)),convert_to_integer($(maxQuantity)));
	DO DELETE FROM IDlist WHERE featureID IS NULL;
	FOREACH /add DO DELETE FROM IDlist WHERE featureID=$(id);
	FOREACH /add DO INSERT INTO IDlist (featureID, minQuantity, maxQuantity) VALUES ($(id),$(minQuantity),$(maxQuantity));
	FOREACH /remove DO DELETE FROM IDlist WHERE featureID=$(id);
	INTO ComponentFeature DO
		SELECT
			featureID AS "id",
			Feature.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM IDlist, Feature
		WHERE Feature.ID = IDlist.featureID;
	DO dropIdList();
END

TRANSACTION selectComponentFeature
BEGIN
	INTO . DO
		SELECT
			$(id) AS id,
			$(minQuantity) AS "minQuantity",
			$(maxQuantity) AS "maxQuantity";
END
