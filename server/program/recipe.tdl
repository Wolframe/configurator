INCLUDE dragAndDrop.tdl

TRANSACTION selectRecipeList
BEGIN
	INTO recipe DO
		SELECT Recipe.ID AS "id", Recipe.name AS "name",
			Recipe.description,
			Category.name AS "categoryName",
			creationDate AS "creationDate", comment
		FROM Recipe
		LEFT JOIN Category
		ON Recipe.categoryID = Category.ID
		ORDER BY Recipe.ID;
END

TRANSACTION addRecipe
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO INSERT INTO Recipe( name, normalizedName, description, categoryID, creationDate, comment )
		VALUES ( $(name), $(normalizedName), $(description), $(category/id), datetime('now'), $(comment) );
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Recipe WHERE normalizedName = $(normalizedName);
	KEEP AS newitem;
	DO SELECT MAX(orderNumber) AS newOrderNumber FROM CategoryPicture WHERE recipeID = $newitem.ID;
	FOREACH picture DO INSERT INTO RecipePicture( recipeID, pictureID, orderNumber ) VALUES( $newitem.ID, $(id), $newOrderNumber );
	DO DELETE FROM RecipePicture WHERE pictureID IS NULL;
	FOREACH categories_required/RecipeCategory DO
		INSERT INTO RecipeContent( recipeID, categoryID, minQuantity, maxQuantity )
			VALUES( $1, $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH components_required/RecipeComponent DO
		INSERT INTO RecipeComponent( recipeID, componentID, quantity )
		VALUES( $1, $(id), convert_to_integer($(quantity)) );
END

TRANSACTION updateRecipe
PREPROCESS
BEGIN
	INTO normalizedName DO name( name );	-- call 'name' normalizer
END
BEGIN
	DO DELETE FROM RecipePicture WHERE recipeID = $(id);
	DO UPDATE Recipe SET name=$(name), normalizedName=$(normalizedName),
		description=$(description), categoryID=$(category/id),
		creationDate=datetime('now'), comment=$(comment)
		WHERE ID=$(id);
	FOREACH picture DO INSERT INTO RecipePicture( recipeID, pictureID ) VALUES( $(/id), $(id) );
	DO DELETE FROM RecipePicture WHERE pictureID IS NULL;
	DO DELETE FROM RecipeContent WHERE recipeID = $(id);
	DO DELETE FROM RecipeComponent WHERE recipeID = $(id);
	FOREACH categories_required/RecipeCategory DO
		INSERT INTO RecipeContent( recipeID, categoryID, minQuantity, maxQuantity )
			VALUES( $(/id), $(id), convert_to_integer($(minQuantity)), convert_to_integer($(maxQuantity)) );
	FOREACH components_required/RecipeComponent DO
		INSERT INTO RecipeComponent( recipeID, componentID, quantity )
		VALUES( $(/id), $(id), convert_to_integer($(quantity)) );
END

TRANSACTION deleteRecipe
BEGIN
	DO DELETE FROM RecipeContent WHERE recipeID = $(id);
	DO DELETE FROM RecipeComponent WHERE recipeID = $(id);
	DO DELETE FROM RecipePicture WHERE recipeID = $(id);
	DO DELETE FROM Recipe WHERE ID = $(id);
END

TRANSACTION selectRecipe
BEGIN
	INTO . DO
		SELECT Recipe.ID AS "id", name, description,
			creationDate AS "creationDate", comment
			FROM Recipe
			WHERE Recipe.ID = $(id);
	INTO category DO
		SELECT categoryID AS "id", Category.name AS "_"
			FROM Recipe, Category
			WHERE Recipe.ID = $(id)
			AND Recipe.CategoryID = Category.ID;
	INTO categories_required/RecipeCategory DO
		SELECT
			categoryID AS "id",
			Category.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM RecipeContent, Category
		WHERE recipeID = $(id)
		AND categoryID = Category.ID;
	INTO components_required/RecipeComponent DO
		SELECT
			componentID AS "id",
			Component.name AS "name",
			quantity AS "quantity"
		FROM RecipeComponent, Component
		WHERE recipeID = $(id)
		AND componentID = Component.ID;
END

TRANSACTION selectRecipePictures -- (id)
BEGIN
	INTO picture DO SELECT pictureID AS "id", thumbnail, caption
		FROM RecipePicture, Picture
		WHERE RecipePicture.pictureID = Picture.ID
		AND RecipePicture.recipeID = $(id)
		ORDER BY RecipePicture.orderNumber;
END

--
-- selectRecipeCategoriesRequired : temporay relation storage for annotated category/feature relations
--
TRANSACTION selectRecipeCategoryList
BEGIN
	DO createCategoryIDlist();
	FOREACH /category DO INSERT INTO IDlist (categoryID, minQuantity, maxQuantity) VALUES ($(id),convert_to_integer($(minQuantity)),convert_to_integer($(maxQuantity)));
	DO DELETE FROM IDlist WHERE categoryID IS NULL;
	FOREACH /add DO DELETE FROM IDlist WHERE categoryID=$(id);
	FOREACH /add DO INSERT INTO IDlist (categoryID, minQuantity, maxQuantity) VALUES ($(id),$(minQuantity),$(maxQuantity));
	FOREACH /remove DO DELETE FROM IDlist WHERE categoryID=$(id);
	INTO RecipeCategory DO
		SELECT
			categoryID AS "id",
			Category.name AS "name",
			minQuantity AS "minQuantity",
			maxQuantity AS "maxQuantity"
		FROM IDlist, Category
		WHERE Category.ID = IDlist.categoryID;
	DO dropIdList();
END

TRANSACTION selectRecipeCategory
BEGIN
	INTO . DO
		SELECT
			$(id) AS id,
			$(minQuantity) AS "minQuantity",
			$(maxQuantity) AS "maxQuantity";
END

--
-- selectRecipeComponentsRequired : temporay relation storage for annotated category/feature relations
--
TRANSACTION selectRecipeComponentList
BEGIN
	DO createComponentIDlist();
	FOREACH /component DO INSERT INTO IDlist (componentID, quantity) VALUES ($(id),convert_to_integer($(quantity)));
	DO DELETE FROM IDlist WHERE componentID IS NULL;
	FOREACH /add DO DELETE FROM IDlist WHERE componentID=$(id);
	FOREACH /add DO INSERT INTO IDlist (componentID, quantity) VALUES ($(id),$(quantity));
	FOREACH /remove DO DELETE FROM IDlist WHERE componentID=$(id);
	INTO RecipeComponent DO
		SELECT
			componentID AS "id",
			Component.name AS "name",
			quantity AS "quantity"
		FROM IDlist, Component
		WHERE Component.ID = IDlist.componentID;
	DO dropIdList();
END

TRANSACTION selectRecipeComponent
BEGIN
	INTO . DO
		SELECT
			$(id) AS id,
			$(quantity) AS "quantity";
END


TRANSACTION changeRecipePictureOrder
BEGIN
	DO listLocalMoveElement<RecipePicture,pictureID,recipeID>( $(srcid), $(dstid), $(recipeid));
END

